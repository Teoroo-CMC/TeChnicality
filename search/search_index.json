{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Technical Notes by the TeC Group This website is the shared documentation page made and maintained by the TeC Group . The group works on \"The physical chemistry of ionically conducting solutions\" and \"The physical chemistry of electrically charged interfaces\" for energy storage applications. This site contains notes covering tutorials and manuals for running computer simulations and developing tools thereof. It is intended as a knowledge base for technical problems common in those simulations. The site also serve as a practice repo for the group members to collaborate on a project using Git and GitHub. The source files for this repo are currently open to members of the TeC group only, and copyright reserved by the TeC Group. If you are a group member, you are welcome to contribute to this website, following the instructions in How-to/Edit this site .","title":"Home"},{"location":"#technical-notes-by-the-tec-group","text":"This website is the shared documentation page made and maintained by the TeC Group . The group works on \"The physical chemistry of ionically conducting solutions\" and \"The physical chemistry of electrically charged interfaces\" for energy storage applications. This site contains notes covering tutorials and manuals for running computer simulations and developing tools thereof. It is intended as a knowledge base for technical problems common in those simulations. The site also serve as a practice repo for the group members to collaborate on a project using Git and GitHub. The source files for this repo are currently open to members of the TeC group only, and copyright reserved by the TeC Group. If you are a group member, you are welcome to contribute to this website, following the instructions in How-to/Edit this site .","title":"Technical Notes by the TeC Group"},{"location":"develop/overview/","text":"Developer's Guide This section contains guidelines and tooling for code development.","title":"Overview"},{"location":"develop/overview/#developers-guide","text":"This section contains guidelines and tooling for code development.","title":"Developer's Guide"},{"location":"simulate/overview/","text":"Simulation Techniques This part of the documentation is instructions to run specific software or type of simulations.","title":"Overview"},{"location":"simulate/overview/#simulation-techniques","text":"This part of the documentation is instructions to run specific software or type of simulations.","title":"Simulation Techniques"},{"location":"tutorial/overview/","text":"Overview This section contains tutorials for basic operations for simulation or develop tasks. Documentation here are intended to be easy to follow . One should expect step-by-step guides for simple tasks, with sufficient explanation but not too many specifics. Edit this site : for those who are reading this as TeC members, please follow the instructions in the \"Edit this site\" section to edit this document. The guide covers the Markdown syntax, with which this document is written, and the git workflow to collaborate on an open-source repository. You can start by forking the private repo for this documentation, and open a \"Codespace\" in your private repo, in which necessary tools are prepared.","title":"Overview"},{"location":"tutorial/overview/#overview","text":"This section contains tutorials for basic operations for simulation or develop tasks. Documentation here are intended to be easy to follow . One should expect step-by-step guides for simple tasks, with sufficient explanation but not too many specifics. Edit this site : for those who are reading this as TeC members, please follow the instructions in the \"Edit this site\" section to edit this document. The guide covers the Markdown syntax, with which this document is written, and the git workflow to collaborate on an open-source repository. You can start by forking the private repo for this documentation, and open a \"Codespace\" in your private repo, in which necessary tools are prepared.","title":"Overview"},{"location":"tutorial/this_site/git/","text":"Git and GitHub workflow This instruction skim through of using Git in a collaborative project. The workflow is based on typical open-source projects on GitHub, though a similar experience can be expected regardless of where the project is hosted. GitLens vs. git command Instructions in this document have two versions, one with VS Code + GitLens and one with the git command. The former is provided because the graphic UI is easier to work with, and covers most of the daily usage. However, note that the command provides more functionalities, and you might need it for edge cases (e.g., to find a lost commit, or to rewrite history). Git repository A git repository (repo) is a folder managed by git. That means git keeps track of the files in it, you can switch, compare, and combine different versions with git. You can use git repo for local folders only, but it is common to synchronize your local repo to a remote server (e.g. on GitHub). While working with a git repo, it's a good idea to synchronize often the local and remote changes. GitLens Getting familiar with the local and remote repos: Run \"Git: Fetch From All Remotes\" command; Search the \"Commit Graph\" command and show the commit graph. You should see two remotes, one for your own private fork (origin), and one for the shared main repo (upstream). This is a common setup where you own whole controll over the \"origin\", while the \"upstream\" is administrated by the core developer or a team. When you proceed with this tutotiral, see how the changes are reflected in the graph. CLI Inspecting a repo from CLI: Run git remote -v in a git repository, how many remotes you have; git fetch to update the remotes; git status to compare your local copy to the remote; git pull to apply remote changes to your local repo (you might have to setup the default remotes). Commits Commit are the basic element of \"changes\" in git, whenever you make a change, it will be identified as a hex code (called SHA) like 3c03f5 . The code itself is very long, but it is usually OK to refer to it with the first 6 digits. To make a commit, you have to \"stage\" your changes. Staging prepares your change to be \"committed\" , which means making a snapshot of you project. Practice Create a new file in the documentation, commit it following the instruction below. GitLens Make a commit with GitLens: Changes in VS Code can be found in the source control side panel; You can click on a file to see what changes are made; Clicking the + (plus) sign to stages your change; Write a short message and click commit to make a commit; Check the history in Commit Graph. CLI Make a commit from CLI git add filename.suffix to stage the change; git commit to start a commit, an editor of your choice should pop up a commit will be made after you save and exit; If you are in a hurry, you can just attach the message with git commit -c \"commit message\" ; Use git log to inspect the history. You see that you don't have to commit all your changes at once, and a good practice is to arrange your commits in some logical order and write concise commit messages. But for now, don't worry too much and just keep in mind that: Frequent commits are better than big mixed commits; Commit messages should be informative. I.e., write \"work in progress for XXX task\", rather than \"combined progress in May\". Later in this tutorial you will see how to re-arrange your commits, and it is easier if you have small commits than big ones. You should now see your commit and its SHA code. The code allows you to switch between different versions of your repo, when you do so, you \"check out\" a commit (e.g. git checkout 3c03f5d ). You will not often check out commits directly, instead, you will usually use \"branches\" instead. We do not need new branches in this tutorial, but you can read more here . Rebase Rebasing is commonly used to synchronize your commits remote changes. When you rebase your commits, you \"transplant\" your commit onto some other commits, see the illustration below: Before A---B---C local main / D---E---F---G upstream main After A'--B'--C' local main / D---E---F---G upstream main You see how this turns your progress A, B, C into new commits A', B', C' , meaning they will get new SHA codes since each of them is based on a different starting point now. The rebase command offers much freedom for rearranging your commits. See how you can \"squash\" multiple commits into one to clean up a long commit history below: GitLens Make a new commit and combine the two commits you've made with rebase: Edit mkdocs.yml , add your page into the navigation and commit the change; In the Commit Graph, choose the commit before your first change, choose \"Rebase current branch onto commit\" and select \"Interactive Rebase\". In the editor, rearrange the order of previous commits, select \"squash\" for the second commit you made, and click \"Start Rebase\". You will be able to write a new commit message for the combined commit. CLI With the command line interface, you can initiate an interactive rebase with the git rebase --interactive command. You can learn more about the rebase command in this documentation . After saving and exiting the message editor, you shall see a new combined commit, with a new SHA code. The same tool is useful if you want to rewrite one commit message, or simply fix some small error in a previous commit. Push With git, it is easy to synchronize changes of code. GitLens Click on \"Sync Changes\" in the Source Control Panel to \"push\" your changes to the the \"origin\" remote, i.e., your fork of this private repo. This usually works fine, however, when you have a conflicting history to the remote one, you will need to force the update by manually running push. Find the command \"GitLens: Push\". Selecting \"Force Push\" will force the remote branch to synchronize. CLI To sync changes in CLI you can use the git push command. Git also allows you to set up multiple remotes, and configure default push destinations. You can find more detaild explanations about synchronization in this documentation Check that your changes appears on the GitHub page. Collaboration on GitHub In the above sections, you see how you can use Git to track the change of your code. In a collaborative setting, the ideas are the same, the difference is that one cannot allow everyone to write to a main repo. A standard procedure is called \"pull request\" (PR), as the name suggests, one submit one's change to the main repo, but the administrator decides whether the changes are accepted (or \"pulled\" ). You do not need to finish your changes to start a PR, in fact, many repos use PR as a way to discuss changes to the code. You can start a PR now and describe the changes you will make. After you completed your work, comment in the PR to let the administrator review your work. Start a PR in the shared repo ; Chose \"compare across forks\" and find your private repo as the \"head\"; Finish your documentation and notify it in PR when it's done. Someone should review your changes, and comment on it. Address the changes if necessary, and your PR will be merged in the end. Rebase vs. merge In a shared repo some extra rules might be needed to keep the history trackable, there are two general styles of collaboration, namely rebase and merge. In the above sections, we have only used one branch and rebase changes if necessary. Some projects require this for the entire project, so that history will be \"linear\" in the long run. On the other hand, in some repositories, one can work on different branches and keep the history of \"merging\", and you might see parallel developments of the project in the log. There are debates on the preferable styles of git history, for this documentation, we keep a linear history with the \"rebase\" workflow for its simplicity. This means, you will only be able to pass a pull-request when your commits are put on top the current shared \"main\" branch.","title":"Git & GitHub"},{"location":"tutorial/this_site/git/#git-and-github-workflow","text":"This instruction skim through of using Git in a collaborative project. The workflow is based on typical open-source projects on GitHub, though a similar experience can be expected regardless of where the project is hosted. GitLens vs. git command Instructions in this document have two versions, one with VS Code + GitLens and one with the git command. The former is provided because the graphic UI is easier to work with, and covers most of the daily usage. However, note that the command provides more functionalities, and you might need it for edge cases (e.g., to find a lost commit, or to rewrite history).","title":"Git and GitHub workflow"},{"location":"tutorial/this_site/git/#git-repository","text":"A git repository (repo) is a folder managed by git. That means git keeps track of the files in it, you can switch, compare, and combine different versions with git. You can use git repo for local folders only, but it is common to synchronize your local repo to a remote server (e.g. on GitHub). While working with a git repo, it's a good idea to synchronize often the local and remote changes. GitLens Getting familiar with the local and remote repos: Run \"Git: Fetch From All Remotes\" command; Search the \"Commit Graph\" command and show the commit graph. You should see two remotes, one for your own private fork (origin), and one for the shared main repo (upstream). This is a common setup where you own whole controll over the \"origin\", while the \"upstream\" is administrated by the core developer or a team. When you proceed with this tutotiral, see how the changes are reflected in the graph. CLI Inspecting a repo from CLI: Run git remote -v in a git repository, how many remotes you have; git fetch to update the remotes; git status to compare your local copy to the remote; git pull to apply remote changes to your local repo (you might have to setup the default remotes).","title":"Git repository"},{"location":"tutorial/this_site/git/#commits","text":"Commit are the basic element of \"changes\" in git, whenever you make a change, it will be identified as a hex code (called SHA) like 3c03f5 . The code itself is very long, but it is usually OK to refer to it with the first 6 digits. To make a commit, you have to \"stage\" your changes. Staging prepares your change to be \"committed\" , which means making a snapshot of you project. Practice Create a new file in the documentation, commit it following the instruction below. GitLens Make a commit with GitLens: Changes in VS Code can be found in the source control side panel; You can click on a file to see what changes are made; Clicking the + (plus) sign to stages your change; Write a short message and click commit to make a commit; Check the history in Commit Graph. CLI Make a commit from CLI git add filename.suffix to stage the change; git commit to start a commit, an editor of your choice should pop up a commit will be made after you save and exit; If you are in a hurry, you can just attach the message with git commit -c \"commit message\" ; Use git log to inspect the history. You see that you don't have to commit all your changes at once, and a good practice is to arrange your commits in some logical order and write concise commit messages. But for now, don't worry too much and just keep in mind that: Frequent commits are better than big mixed commits; Commit messages should be informative. I.e., write \"work in progress for XXX task\", rather than \"combined progress in May\". Later in this tutorial you will see how to re-arrange your commits, and it is easier if you have small commits than big ones. You should now see your commit and its SHA code. The code allows you to switch between different versions of your repo, when you do so, you \"check out\" a commit (e.g. git checkout 3c03f5d ). You will not often check out commits directly, instead, you will usually use \"branches\" instead. We do not need new branches in this tutorial, but you can read more here .","title":"Commits"},{"location":"tutorial/this_site/git/#rebase","text":"Rebasing is commonly used to synchronize your commits remote changes. When you rebase your commits, you \"transplant\" your commit onto some other commits, see the illustration below: Before A---B---C local main / D---E---F---G upstream main After A'--B'--C' local main / D---E---F---G upstream main You see how this turns your progress A, B, C into new commits A', B', C' , meaning they will get new SHA codes since each of them is based on a different starting point now. The rebase command offers much freedom for rearranging your commits. See how you can \"squash\" multiple commits into one to clean up a long commit history below: GitLens Make a new commit and combine the two commits you've made with rebase: Edit mkdocs.yml , add your page into the navigation and commit the change; In the Commit Graph, choose the commit before your first change, choose \"Rebase current branch onto commit\" and select \"Interactive Rebase\". In the editor, rearrange the order of previous commits, select \"squash\" for the second commit you made, and click \"Start Rebase\". You will be able to write a new commit message for the combined commit. CLI With the command line interface, you can initiate an interactive rebase with the git rebase --interactive command. You can learn more about the rebase command in this documentation . After saving and exiting the message editor, you shall see a new combined commit, with a new SHA code. The same tool is useful if you want to rewrite one commit message, or simply fix some small error in a previous commit.","title":"Rebase"},{"location":"tutorial/this_site/git/#push","text":"With git, it is easy to synchronize changes of code. GitLens Click on \"Sync Changes\" in the Source Control Panel to \"push\" your changes to the the \"origin\" remote, i.e., your fork of this private repo. This usually works fine, however, when you have a conflicting history to the remote one, you will need to force the update by manually running push. Find the command \"GitLens: Push\". Selecting \"Force Push\" will force the remote branch to synchronize. CLI To sync changes in CLI you can use the git push command. Git also allows you to set up multiple remotes, and configure default push destinations. You can find more detaild explanations about synchronization in this documentation Check that your changes appears on the GitHub page.","title":"Push"},{"location":"tutorial/this_site/git/#collaboration-on-github","text":"In the above sections, you see how you can use Git to track the change of your code. In a collaborative setting, the ideas are the same, the difference is that one cannot allow everyone to write to a main repo. A standard procedure is called \"pull request\" (PR), as the name suggests, one submit one's change to the main repo, but the administrator decides whether the changes are accepted (or \"pulled\" ). You do not need to finish your changes to start a PR, in fact, many repos use PR as a way to discuss changes to the code. You can start a PR now and describe the changes you will make. After you completed your work, comment in the PR to let the administrator review your work. Start a PR in the shared repo ; Chose \"compare across forks\" and find your private repo as the \"head\"; Finish your documentation and notify it in PR when it's done. Someone should review your changes, and comment on it. Address the changes if necessary, and your PR will be merged in the end.","title":"Collaboration on GitHub"},{"location":"tutorial/this_site/git/#rebase-vs-merge","text":"In a shared repo some extra rules might be needed to keep the history trackable, there are two general styles of collaboration, namely rebase and merge. In the above sections, we have only used one branch and rebase changes if necessary. Some projects require this for the entire project, so that history will be \"linear\" in the long run. On the other hand, in some repositories, one can work on different branches and keep the history of \"merging\", and you might see parallel developments of the project in the log. There are debates on the preferable styles of git history, for this documentation, we keep a linear history with the \"rebase\" workflow for its simplicity. This means, you will only be able to pass a pull-request when your commits are put on top the current shared \"main\" branch.","title":"Rebase vs. merge"},{"location":"tutorial/this_site/markdown/","text":"Writing with the Markdown syntax This page contains examples of formatting ext with Markdown, click on the Markdown and Result tab to see how the source code corresponding outcome. Markdown renders can look different in different places The rendering of the same Markdown text can depend on the theme by the rendering engine, the syntax supported by it, and the theme specified by it. You can see how this is the case on the rendered documentaion site, the GitHub page for this document, and Markdown preview tools (try Ctrl+Shift+V if you use VS Code). Basic Syntax The idea of Markdown is to mark text with symbols for them to be rendered, while keeping the readability of the plain text. In the following, you find standard syntaxes to Markdown, click on the result tab to see how they are rendered on a web page. A more comprehensive list of syntax can be found in this link . Markdown # Headings start with # (hash) sign ## Add more hash to get levels of heading Text can be formatted inline using *starts* , **double stars** ; paragraphs are separated with empty lines, single space at the end of lines should will be ignored (and should be avoided), New lines within a paragraph can be enforced with two spaces. Separating lines can be manually inserted with three `-` (minus) symbols. --- <https://url.links> and <mail.address@TeC> should be wrappend in `<>` (pointy brackets) to be recognized. And text with hyperlinks can be inserted with `[]` (square brackets), in one of the three ways: - [ link with url in bracket ]( https://goes.to.nowhere ); - [link with url in a separated line]; - [ link with an id ][ id_of_link ]. [ link with url in a separated line ]: https://goes.to.nowhere [ id_of_link ]: https://goes.to.nowhere ![](https://avatars.githubusercontent.com/u/45621575?s=400&u=e274624771d1656a84a223633c0397469e3a3330&v=4){width=100px} Links can also be used to include images to the document: ## Lists Unordered list with can be denoted with the symbols `-` , `+` or `*` : - Apple; - Orange; - Banana. Ordered list with can be denoted with numbers folowed by a `.` (dot), numbers will be assigned automatically during the rendering: 1. Apple; 2. Orange; 3. Banana. ## Blocks > Block quotes can be included with `>` (greater) symbols. Code blocks can be included with the three `` ` ` ` (backtick or backquote) symbols: ```bash echo \"Hello World\" ``` Result Headings start with # (hash) sign Add more hash to get levels of heading Text can be formatted inline using starts , double stars ; paragraphs are separated with empty lines, single space at the end of lines should will be ignored (and should be avoided), New lines within a paragraph can be enforced with two spaces. Separating lines can be manually inserted with three - (minus) symbols. https://url.links and mail.address@TeC should be wrappend in <> (pointy brackets) to be recognized. And text with hyperlinks can be inserted with [] (square brackets), in one of the three ways: link with url in bracket ; link with url in a separated line ; link with an id . Links can also be used to include images to the document: Lists Unordered list with can be denoted with the symbols - , + or * : Apple; Orange; Banana. Ordered list with can be denoted with numbers folowed by a . (dot), numbers will be assigned automatically during the rendering: Apple; Orange; Banana. Blocks Block quotes can be included with > (greater) symbols. Code blocks can be included with the three ` (backtick or backquote) symbols: echo \"Hello World\" GitHub Flavored Markdown The above syntax gives some essential elements for technological documentations, but some extra elements might come handy, such as tables, task lists, etc. The most widely accepted set of the extensions is the ones used in GitHub. The extended syntax is called GitHub flavored markdown (GFM), and showcased below: Markdown ~~Strikeout~~ text with tildes. Task lists with `[ ]` (square bracket with space or x) after a bullet: - [ ] Task to be done - [x] Finished task Tables: | Item | Price | Unit | Description | |---------|-------|----------|--------------------------------------------------------------------------| | Apple | 20 | SEK/kg | An apple is an edible fruit produced by an apple tree (Malus domestica). | | Spinach | 30 | SEK/pack | Spinach (Spinacia oleracea) is a leafy green flowering plant. | Result Strikeout text with tildes. Task lists with [ ] (square bracket with space or x) after a bullet: Task to be done Finished task Tables: Item Price Unit Description Apple 20 SEK/kg An apple is an edible fruit produced by an apple tree (Malus domestica). Spinach 30 SEK/pack Spinach (Spinacia oleracea) is a leafy green flowering plant. Extended Syntax Some extra flexibility are given through extensions to Markdown syntax, most of them (including the tabbed contents above) in this website are supported by the PyMdownX package. Be aware that the following might not work as expected as a README.md file on GitHub. Markdown Footnote are links labbeled with the `^` (caret) sign, they will be put into the bottom of pages.[^1] Reference to bibtex files can be inserted with `[@bib_key]` ,[^bibtex] they will be also appear as footnotes.[^2] [ ^1 ]: The footnote text itself can be put wherever proper in the same document, e.g. following the paragraph. [ ^bibtex ]: This is supported by the [mkdocs-bibtex] package, see their documentation for details. For this document, the bibtex file is stored at `docs/ref.bib` , and the style is at `docs/jcp.csl` . [ mkdocs-bibtex ]: https://github.com/shyamd/mkdocs-bibtex/ Math equations inline with `$...$` or in blocks with `$$ ... $$` $$ u _{\\alpha} = \\frac{D^{\\mathrm{s}}_ {\\alpha}}{RT} = \\lim_{t\\to\\infty} \\frac{1}{6RTt} \\left\\langle \\frac{1}{N_{\\alpha}} \\sum_{i\\in\\alpha} \\|\\Delta \\mathbf{r}_{i}(t)\\|^{2} \\right\\rangle $$ Tabbed contents can be inserted with blocks indicated by three `=` (equal) marks, followed by the title and indented text: === \"The quick brown fox\" jumps over the lazy dog === \"Lorem ipsum\" Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Note, warning, and error blocks may be inserted with three `!` (exclamation) marks: === \"Note\" !!! Note Notes are blue. === \"Warning\" !!! Warning \"Title of the blocks can be changed\" Warnings are yellow === \"Dangers\" !!! Danger \"\" Dangers are red, and titles can be blank. Similar syntax for collapsible blocks with three `?` (question) marks: === \"Note\" ??? Note Notes are still blue. === \"Warning\" ??? Warning \"Title of collapsible blocks can also be changed\" Warnings are still yellow. === \"Dangers\" ???+ Danger \"Add a + sign to expand the block by default\" Don't set empty titles for collapsibles, though. Result Footnote are links labbeled with the ^ (caret) sign, they will be put into the bottom of pages. 1 Reference to bibtex files can be inserted with [@bib_key] , 2 they will be also appear as footnotes. 3 Math equations inline with $...$ or in blocks with $$ ... $$ \\[ u_{\\alpha} = \\frac{D^{\\mathrm{s}}_{\\alpha}}{RT} = \\lim_{t\\to\\infty} \\frac{1}{6RTt} \\left\\langle \\frac{1}{N_{\\alpha}} \\sum_{i\\in\\alpha} \\|\\Delta \\mathbf{r}_{i}(t)\\|^{2} \\right\\rangle \\] Tabbed contents can be inserted with blocks indicated by three = (equal) marks, followed by the title and indented text: The quick brown fox jumps over the lazy dog Lorem ipsum Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Note, warning, and error blocks may be inserted with three ! (exclamation) marks: Note Note Notes are blue. Warning Title of the blocks can be changed Warnings are yellow Dangers Dangers are red, and titles can be blank. Similar syntax for collapsible blocks with three ? (question) marks: Note Note Notes are still blue. Warning Title of collapsible blocks can also be changed Warnings are still yellow. Dangers Add a + sign to expand the block by default Don't set empty titles for collapsibles, though. The footnote text itself can be put wherever proper in the same document, e.g. following the paragraph. \u21a9 This is supported by the mkdocs-bibtex package, see their documentation for details. For this document, the bibtex file is stored at docs/ref.bib , and the style is at docs/jcp.csl . \u21a9 1 A. Einstein, \u201c \u00dcber die von der molekularkinetischen theorie der w\u00e4rme geforderte bewegung von in ruhenden fl\u00fcssigkeiten suspendierten teilchen ,\u201d Ann. Phys. 322 (8), 549\u2013560 (1905). \u21a9","title":"Markdown"},{"location":"tutorial/this_site/markdown/#writing-with-the-markdown-syntax","text":"This page contains examples of formatting ext with Markdown, click on the Markdown and Result tab to see how the source code corresponding outcome. Markdown renders can look different in different places The rendering of the same Markdown text can depend on the theme by the rendering engine, the syntax supported by it, and the theme specified by it. You can see how this is the case on the rendered documentaion site, the GitHub page for this document, and Markdown preview tools (try Ctrl+Shift+V if you use VS Code).","title":"Writing with the Markdown syntax"},{"location":"tutorial/this_site/markdown/#basic-syntax","text":"The idea of Markdown is to mark text with symbols for them to be rendered, while keeping the readability of the plain text. In the following, you find standard syntaxes to Markdown, click on the result tab to see how they are rendered on a web page. A more comprehensive list of syntax can be found in this link . Markdown # Headings start with # (hash) sign ## Add more hash to get levels of heading Text can be formatted inline using *starts* , **double stars** ; paragraphs are separated with empty lines, single space at the end of lines should will be ignored (and should be avoided), New lines within a paragraph can be enforced with two spaces. Separating lines can be manually inserted with three `-` (minus) symbols. --- <https://url.links> and <mail.address@TeC> should be wrappend in `<>` (pointy brackets) to be recognized. And text with hyperlinks can be inserted with `[]` (square brackets), in one of the three ways: - [ link with url in bracket ]( https://goes.to.nowhere ); - [link with url in a separated line]; - [ link with an id ][ id_of_link ]. [ link with url in a separated line ]: https://goes.to.nowhere [ id_of_link ]: https://goes.to.nowhere ![](https://avatars.githubusercontent.com/u/45621575?s=400&u=e274624771d1656a84a223633c0397469e3a3330&v=4){width=100px} Links can also be used to include images to the document: ## Lists Unordered list with can be denoted with the symbols `-` , `+` or `*` : - Apple; - Orange; - Banana. Ordered list with can be denoted with numbers folowed by a `.` (dot), numbers will be assigned automatically during the rendering: 1. Apple; 2. Orange; 3. Banana. ## Blocks > Block quotes can be included with `>` (greater) symbols. Code blocks can be included with the three `` ` ` ` (backtick or backquote) symbols: ```bash echo \"Hello World\" ``` Result","title":"Basic Syntax"},{"location":"tutorial/this_site/markdown/#headings-start-with-hash-sign","text":"","title":"Headings start with # (hash) sign"},{"location":"tutorial/this_site/markdown/#add-more-hash-to-get-levels-of-heading","text":"Text can be formatted inline using starts , double stars ; paragraphs are separated with empty lines, single space at the end of lines should will be ignored (and should be avoided), New lines within a paragraph can be enforced with two spaces. Separating lines can be manually inserted with three - (minus) symbols. https://url.links and mail.address@TeC should be wrappend in <> (pointy brackets) to be recognized. And text with hyperlinks can be inserted with [] (square brackets), in one of the three ways: link with url in bracket ; link with url in a separated line ; link with an id . Links can also be used to include images to the document:","title":"Add more hash to get levels of heading"},{"location":"tutorial/this_site/markdown/#lists","text":"Unordered list with can be denoted with the symbols - , + or * : Apple; Orange; Banana. Ordered list with can be denoted with numbers folowed by a . (dot), numbers will be assigned automatically during the rendering: Apple; Orange; Banana.","title":"Lists"},{"location":"tutorial/this_site/markdown/#blocks","text":"Block quotes can be included with > (greater) symbols. Code blocks can be included with the three ` (backtick or backquote) symbols: echo \"Hello World\"","title":"Blocks"},{"location":"tutorial/this_site/markdown/#github-flavored-markdown","text":"The above syntax gives some essential elements for technological documentations, but some extra elements might come handy, such as tables, task lists, etc. The most widely accepted set of the extensions is the ones used in GitHub. The extended syntax is called GitHub flavored markdown (GFM), and showcased below: Markdown ~~Strikeout~~ text with tildes. Task lists with `[ ]` (square bracket with space or x) after a bullet: - [ ] Task to be done - [x] Finished task Tables: | Item | Price | Unit | Description | |---------|-------|----------|--------------------------------------------------------------------------| | Apple | 20 | SEK/kg | An apple is an edible fruit produced by an apple tree (Malus domestica). | | Spinach | 30 | SEK/pack | Spinach (Spinacia oleracea) is a leafy green flowering plant. | Result Strikeout text with tildes. Task lists with [ ] (square bracket with space or x) after a bullet: Task to be done Finished task Tables: Item Price Unit Description Apple 20 SEK/kg An apple is an edible fruit produced by an apple tree (Malus domestica). Spinach 30 SEK/pack Spinach (Spinacia oleracea) is a leafy green flowering plant.","title":"GitHub Flavored Markdown"},{"location":"tutorial/this_site/markdown/#extended-syntax","text":"Some extra flexibility are given through extensions to Markdown syntax, most of them (including the tabbed contents above) in this website are supported by the PyMdownX package. Be aware that the following might not work as expected as a README.md file on GitHub. Markdown Footnote are links labbeled with the `^` (caret) sign, they will be put into the bottom of pages.[^1] Reference to bibtex files can be inserted with `[@bib_key]` ,[^bibtex] they will be also appear as footnotes.[^2] [ ^1 ]: The footnote text itself can be put wherever proper in the same document, e.g. following the paragraph. [ ^bibtex ]: This is supported by the [mkdocs-bibtex] package, see their documentation for details. For this document, the bibtex file is stored at `docs/ref.bib` , and the style is at `docs/jcp.csl` . [ mkdocs-bibtex ]: https://github.com/shyamd/mkdocs-bibtex/ Math equations inline with `$...$` or in blocks with `$$ ... $$` $$ u _{\\alpha} = \\frac{D^{\\mathrm{s}}_ {\\alpha}}{RT} = \\lim_{t\\to\\infty} \\frac{1}{6RTt} \\left\\langle \\frac{1}{N_{\\alpha}} \\sum_{i\\in\\alpha} \\|\\Delta \\mathbf{r}_{i}(t)\\|^{2} \\right\\rangle $$ Tabbed contents can be inserted with blocks indicated by three `=` (equal) marks, followed by the title and indented text: === \"The quick brown fox\" jumps over the lazy dog === \"Lorem ipsum\" Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Note, warning, and error blocks may be inserted with three `!` (exclamation) marks: === \"Note\" !!! Note Notes are blue. === \"Warning\" !!! Warning \"Title of the blocks can be changed\" Warnings are yellow === \"Dangers\" !!! Danger \"\" Dangers are red, and titles can be blank. Similar syntax for collapsible blocks with three `?` (question) marks: === \"Note\" ??? Note Notes are still blue. === \"Warning\" ??? Warning \"Title of collapsible blocks can also be changed\" Warnings are still yellow. === \"Dangers\" ???+ Danger \"Add a + sign to expand the block by default\" Don't set empty titles for collapsibles, though. Result Footnote are links labbeled with the ^ (caret) sign, they will be put into the bottom of pages. 1 Reference to bibtex files can be inserted with [@bib_key] , 2 they will be also appear as footnotes. 3 Math equations inline with $...$ or in blocks with $$ ... $$ \\[ u_{\\alpha} = \\frac{D^{\\mathrm{s}}_{\\alpha}}{RT} = \\lim_{t\\to\\infty} \\frac{1}{6RTt} \\left\\langle \\frac{1}{N_{\\alpha}} \\sum_{i\\in\\alpha} \\|\\Delta \\mathbf{r}_{i}(t)\\|^{2} \\right\\rangle \\] Tabbed contents can be inserted with blocks indicated by three = (equal) marks, followed by the title and indented text: The quick brown fox jumps over the lazy dog Lorem ipsum Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Note, warning, and error blocks may be inserted with three ! (exclamation) marks: Note Note Notes are blue. Warning Title of the blocks can be changed Warnings are yellow Dangers Dangers are red, and titles can be blank. Similar syntax for collapsible blocks with three ? (question) marks: Note Note Notes are still blue. Warning Title of collapsible blocks can also be changed Warnings are still yellow. Dangers Add a + sign to expand the block by default Don't set empty titles for collapsibles, though. The footnote text itself can be put wherever proper in the same document, e.g. following the paragraph. \u21a9 This is supported by the mkdocs-bibtex package, see their documentation for details. For this document, the bibtex file is stored at docs/ref.bib , and the style is at docs/jcp.csl . \u21a9 1 A. Einstein, \u201c \u00dcber die von der molekularkinetischen theorie der w\u00e4rme geforderte bewegung von in ruhenden fl\u00fcssigkeiten suspendierten teilchen ,\u201d Ann. Phys. 322 (8), 549\u2013560 (1905). \u21a9","title":"Extended Syntax"},{"location":"tutorial/this_site/overview/","text":"Edit this documentation This page explains specifics about how this website is organized, and how to contribute to it. The following instruction assumes that you already have some base knowledge about git and markdown editing, and the instructions are based on the VS Code editor. If you are not familiar with those tools, you can through the other tutorials that walks you through the process. Preparing the environment To edit this website, you need an environment with the necessary packages installed (mkdocs, themes and plugins). If you are editing with the GitHub Codespace, those should already be available to you. Manual installation (if needed) python -m venv ~/envs/mkdocs # create a virtural environment git clone git@github.com:Teoroo-CMC/TeChnicality-private.git technicality cd technicality && pip install -e requirements.txt mkdocs serve The last command mkdocs serve starts a server that shows a live preview of the website. If you are using VS Code, you can also launch the server in your command palette ( F1 then Run Task and find mkdocs serve ), and see it in the \"TERMINAL\" tab in the bottoom panel. Mkdocs basics The website is built with mkdocs , a static site generator based on Markdown. This means you write the documentation as a set of Markdown files, and mkdocs compiles them into a website. With mkdocs, you write each page as one Markdown file, and define the (navigation) structure of the website in a config file. This documentation has two versions. When you run mkdocs serve in this repo, you build the private version specified by mkdocs.yml ; when the public site is built, mkdocs-public.yml will be used instead. You can see the difference in the nav section that controls the layout of the site: mkdocs.yml nav : - Home : index.md - Tutorial : - Overview : tutorial/overview.md - PE build : tutorial/PEbuild.md - Dielectric constant : tutorial/opticaldielectric.md - pKa calculation : tutorial/Alicia.md - Edit this site : - Overview : tutorial/this_site/overview.md - AIMD : tutorial/AIMD.md - H2WritePaper : tutorial/h2writepaper.md - VS Code : tutorial/this_site/vscode.md - Markdown : tutorial/this_site/markdown.md - Git & GitHub : tutorial/this_site/git.md - Integral capacitance : tutorial/Integral_capacitance.md - Simulate : - Overview : simulate/overview.md - AML Models : - Open Dataset : simulate/aml/pinn_ds.md - Develop : - Overview : develop/overview.md - Workflows : - Github Action : develop/gh-actions.md mkdocs-public.yml nav : - Home : index.md - Tutorial : - Overview : tutorial/overview.md - Edit this site : - Overview : tutorial/this_site/overview.md - test tutorial : tutorial/this_site/test_tutorial.md - VS Code : tutorial/this_site/vscode.md - Markdown : tutorial/this_site/markdown.md - Git & GitHub : tutorial/this_site/git.md - Simulate : - Overview : simulate/overview.md - Develop : - Overview : develop/overview.md # - Workflows: # - Github Action: develop/gh-actions.md Contributing workflow This repository is intended as a practice for collaboration with Git and GitHub. Therefore, to contribute to this documentation, you need to follow the steps: Fork the repository: teoroo-cmc/technicality-private ; Make your contribution by committing to your fork; Create the pull request, and make changes if requested; Done! During the contribution process, you might be asked to clean up the commit history. This means you will need to rebase your work to the upstream. You should also use rebase to combine small fixes like typos in your commits. If you are assigned as a reviewer for PR, you can check that changes made by it on GitHub. You can also use git checkout to inspect the PR branch and maybe inspect the built documentation after those changes. Hygiene Rules If you are editing with VS Code, the LTeX and markdownlint extensions should be installed, they enforce a consistent format for the site, and check for typos. Fix the warnings before committing; if false positives are found, try suppressing them in the setting temporarily, or adding new words to the dictionary. In addition, wrap texts into the 80-character lines whenever reasonable, except for cases like long lines (you can do so with the Alt-q shortcut in VS Code with the Rewrap extension).","title":"Overview"},{"location":"tutorial/this_site/overview/#edit-this-documentation","text":"This page explains specifics about how this website is organized, and how to contribute to it. The following instruction assumes that you already have some base knowledge about git and markdown editing, and the instructions are based on the VS Code editor. If you are not familiar with those tools, you can through the other tutorials that walks you through the process.","title":"Edit this documentation"},{"location":"tutorial/this_site/overview/#preparing-the-environment","text":"To edit this website, you need an environment with the necessary packages installed (mkdocs, themes and plugins). If you are editing with the GitHub Codespace, those should already be available to you. Manual installation (if needed) python -m venv ~/envs/mkdocs # create a virtural environment git clone git@github.com:Teoroo-CMC/TeChnicality-private.git technicality cd technicality && pip install -e requirements.txt mkdocs serve The last command mkdocs serve starts a server that shows a live preview of the website. If you are using VS Code, you can also launch the server in your command palette ( F1 then Run Task and find mkdocs serve ), and see it in the \"TERMINAL\" tab in the bottoom panel.","title":"Preparing the environment"},{"location":"tutorial/this_site/overview/#mkdocs-basics","text":"The website is built with mkdocs , a static site generator based on Markdown. This means you write the documentation as a set of Markdown files, and mkdocs compiles them into a website. With mkdocs, you write each page as one Markdown file, and define the (navigation) structure of the website in a config file. This documentation has two versions. When you run mkdocs serve in this repo, you build the private version specified by mkdocs.yml ; when the public site is built, mkdocs-public.yml will be used instead. You can see the difference in the nav section that controls the layout of the site: mkdocs.yml nav : - Home : index.md - Tutorial : - Overview : tutorial/overview.md - PE build : tutorial/PEbuild.md - Dielectric constant : tutorial/opticaldielectric.md - pKa calculation : tutorial/Alicia.md - Edit this site : - Overview : tutorial/this_site/overview.md - AIMD : tutorial/AIMD.md - H2WritePaper : tutorial/h2writepaper.md - VS Code : tutorial/this_site/vscode.md - Markdown : tutorial/this_site/markdown.md - Git & GitHub : tutorial/this_site/git.md - Integral capacitance : tutorial/Integral_capacitance.md - Simulate : - Overview : simulate/overview.md - AML Models : - Open Dataset : simulate/aml/pinn_ds.md - Develop : - Overview : develop/overview.md - Workflows : - Github Action : develop/gh-actions.md mkdocs-public.yml nav : - Home : index.md - Tutorial : - Overview : tutorial/overview.md - Edit this site : - Overview : tutorial/this_site/overview.md - test tutorial : tutorial/this_site/test_tutorial.md - VS Code : tutorial/this_site/vscode.md - Markdown : tutorial/this_site/markdown.md - Git & GitHub : tutorial/this_site/git.md - Simulate : - Overview : simulate/overview.md - Develop : - Overview : develop/overview.md # - Workflows: # - Github Action: develop/gh-actions.md","title":"Mkdocs basics"},{"location":"tutorial/this_site/overview/#contributing-workflow","text":"This repository is intended as a practice for collaboration with Git and GitHub. Therefore, to contribute to this documentation, you need to follow the steps: Fork the repository: teoroo-cmc/technicality-private ; Make your contribution by committing to your fork; Create the pull request, and make changes if requested; Done! During the contribution process, you might be asked to clean up the commit history. This means you will need to rebase your work to the upstream. You should also use rebase to combine small fixes like typos in your commits. If you are assigned as a reviewer for PR, you can check that changes made by it on GitHub. You can also use git checkout to inspect the PR branch and maybe inspect the built documentation after those changes.","title":"Contributing workflow"},{"location":"tutorial/this_site/overview/#hygiene-rules","text":"If you are editing with VS Code, the LTeX and markdownlint extensions should be installed, they enforce a consistent format for the site, and check for typos. Fix the warnings before committing; if false positives are found, try suppressing them in the setting temporarily, or adding new words to the dictionary. In addition, wrap texts into the 80-character lines whenever reasonable, except for cases like long lines (you can do so with the Alt-q shortcut in VS Code with the Rewrap extension).","title":"Hygiene Rules"},{"location":"tutorial/this_site/vscode/","text":"VS Code This page walks you through basic operations in the VS Code editor. VS Code is not a hard requirement The other instructions in this documentation does not strictly require VS Code to run. If you wish, you can follow everything in any editor or develop environment you prefer. Nevertheless, VS Code provides the most convinient option that with decent usability and uniform environments for collaborators. Navigating in VS Code Most of the operations in VS Code are accessible through the \"Command Palette\", which you can access by pressing F1 or Ctrl+Shift+P . You can search through the available commands, and alongside the commands you see shortcuts to them. A similar command is Ctrl+P (search files), that gives quick access to files (instead of finding them in the explorer to the left). Practice Open a Command Palette and type color theme (this should bring you to Preferences: Color Theme), chose a color theme that fits your taste. Find the \"Tasks: Run Task\" command, and run the mkdocs serve task. It should start a process the builds the documentation on-the-fly. You can also open the source file of this page named as vscode.md and see how your changes are reflected in the built site. Accessing the terminal To access the terminal, you can use the shortcut Ctrl+` . What you bring up is the so-called \"Panel\" in VS Code. There contains information about running processes, debug and build information, press the shortcut again to hide the Panel. Practice Open and hide the panel several times. Also try creating new terminals by Ctrl+Shift+` . Find the PORTS tab in the panel. You should recognize the port openned by mkdocs , hovering on the local address to chose how the live documentation page is displayed. Extensions In the (left) sidebar, you find the list of extensions installed in VS Code. In this repo, a few extensions are recommended (and should be installed by default), including checkers for typos and Markdown syntax. And a shortcut to wrap long lines with Ctrl+q . A variety of extensions are available to VS Code, some of which will be automatically recommended. Practice Search for the extension \"GitLens\" and install it to your VS Code. The extension provides a few useful interfaces to work with git, which will be demonstrated in the other instructions. Settings For more settings of VS Code, you can open the Settings (use the command palette). Since the VS Code is supposed to work different projects and different environments, the same setting can be set as a user (anything you open with VS Code), machine-wise or project-wise. This will come handy if you decide to use VS Code for different projects. Think We have set up markdownlint to ignore certain rules; can you find what is set (hint: search for \"markdownlint.config\")? What would you do if you want to change this setting for some other project? What if you want to change some config for only yourself (not your collaborators)? Arranging the layout The window layout within VS Code can be easily adjusted to your need, the file views split by dragging file tabs, and the same applies to panel tabs and extensions. Before proceeding, adjust the windows to a comfortable layout. Now, you are well-prepared to edit this document in VS Code. Move on to the next page and see how you can format the documentation using a simple language based on plain text (Markdown).","title":"VS Code"},{"location":"tutorial/this_site/vscode/#vs-code","text":"This page walks you through basic operations in the VS Code editor. VS Code is not a hard requirement The other instructions in this documentation does not strictly require VS Code to run. If you wish, you can follow everything in any editor or develop environment you prefer. Nevertheless, VS Code provides the most convinient option that with decent usability and uniform environments for collaborators.","title":"VS Code"},{"location":"tutorial/this_site/vscode/#navigating-in-vs-code","text":"Most of the operations in VS Code are accessible through the \"Command Palette\", which you can access by pressing F1 or Ctrl+Shift+P . You can search through the available commands, and alongside the commands you see shortcuts to them. A similar command is Ctrl+P (search files), that gives quick access to files (instead of finding them in the explorer to the left). Practice Open a Command Palette and type color theme (this should bring you to Preferences: Color Theme), chose a color theme that fits your taste. Find the \"Tasks: Run Task\" command, and run the mkdocs serve task. It should start a process the builds the documentation on-the-fly. You can also open the source file of this page named as vscode.md and see how your changes are reflected in the built site.","title":"Navigating in VS Code"},{"location":"tutorial/this_site/vscode/#accessing-the-terminal","text":"To access the terminal, you can use the shortcut Ctrl+` . What you bring up is the so-called \"Panel\" in VS Code. There contains information about running processes, debug and build information, press the shortcut again to hide the Panel. Practice Open and hide the panel several times. Also try creating new terminals by Ctrl+Shift+` . Find the PORTS tab in the panel. You should recognize the port openned by mkdocs , hovering on the local address to chose how the live documentation page is displayed.","title":"Accessing the terminal"},{"location":"tutorial/this_site/vscode/#extensions","text":"In the (left) sidebar, you find the list of extensions installed in VS Code. In this repo, a few extensions are recommended (and should be installed by default), including checkers for typos and Markdown syntax. And a shortcut to wrap long lines with Ctrl+q . A variety of extensions are available to VS Code, some of which will be automatically recommended. Practice Search for the extension \"GitLens\" and install it to your VS Code. The extension provides a few useful interfaces to work with git, which will be demonstrated in the other instructions.","title":"Extensions"},{"location":"tutorial/this_site/vscode/#settings","text":"For more settings of VS Code, you can open the Settings (use the command palette). Since the VS Code is supposed to work different projects and different environments, the same setting can be set as a user (anything you open with VS Code), machine-wise or project-wise. This will come handy if you decide to use VS Code for different projects. Think We have set up markdownlint to ignore certain rules; can you find what is set (hint: search for \"markdownlint.config\")? What would you do if you want to change this setting for some other project? What if you want to change some config for only yourself (not your collaborators)?","title":"Settings"},{"location":"tutorial/this_site/vscode/#arranging-the-layout","text":"The window layout within VS Code can be easily adjusted to your need, the file views split by dragging file tabs, and the same applies to panel tabs and extensions. Before proceeding, adjust the windows to a comfortable layout. Now, you are well-prepared to edit this document in VS Code. Move on to the next page and see how you can format the documentation using a simple language based on plain text (Markdown).","title":"Arranging the layout"}]}